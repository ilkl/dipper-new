package com.yundasys.beidou.dipper.framework.handler;import com.yundasys.beidou.dipper.common.exception.BizException;import com.yundasys.beidou.dipper.common.result.Result;import com.yundasys.beidou.dipper.common.result.ResultCode;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.exception.ExceptionUtils;import org.springframework.beans.ConversionNotSupportedException;import org.springframework.beans.TypeMismatchException;import org.springframework.http.converter.HttpMessageNotReadableException;import org.springframework.http.converter.HttpMessageNotWritableException;import org.springframework.validation.BindException;import org.springframework.web.HttpMediaTypeNotAcceptableException;import org.springframework.web.HttpRequestMethodNotSupportedException;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.MissingServletRequestParameterException;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.RestControllerAdvice;import javax.validation.ConstraintViolationException;import javax.validation.ValidationException;import java.io.IOException;/** * 全局捕捉异常类 */@Slf4j@RestControllerAdvicepublic class GlobalExceptionHandler {    /**     * 运行时异常     */    @ExceptionHandler(RuntimeException.class)    public Result runtimeExceptionHandler(RuntimeException ex) {        return resultFormat(ex);    }    /**     * 空指针异常     */    @ExceptionHandler(NullPointerException.class)    public Result nullPointerExceptionHandler(NullPointerException ex) {        return resultFormat(ex);    }    /**     * 类型转换异常     */    @ExceptionHandler(ClassCastException.class)    public Result classCastExceptionHandler(ClassCastException ex) {        return resultFormat(ex);    }    /**     * IO异常     */    @ExceptionHandler(IOException.class)    public Result iOExceptionHandler(IOException ex) {        return resultFormat(ex);    }    /**     * 未知方法异常     */    @ExceptionHandler(NoSuchMethodException.class)    public Result noSuchMethodExceptionHandler(NoSuchMethodException ex) {        return resultFormat(ex);    }    /**     * 数组越界异常     */    @ExceptionHandler(IndexOutOfBoundsException.class)    public Result indexOutOfBoundsExceptionHandler(IndexOutOfBoundsException ex) {        return resultFormat(ex);    }    /**     * 400错误     */    @ExceptionHandler({HttpMessageNotReadableException.class})    public Result requestNotReadable(HttpMessageNotReadableException ex) {        return resultFormat(ex);    }    /**     * 400错误     */    @ExceptionHandler({TypeMismatchException.class})    public Result requestTypeMismatch(TypeMismatchException ex) {        return resultFormat(ex);    }    /**     * 400错误     */    @ExceptionHandler({MissingServletRequestParameterException.class})    public Result requestMissingServletRequest(MissingServletRequestParameterException ex) {        return resultFormat(ex);    }    /**     * 405错误     */    @ExceptionHandler({HttpRequestMethodNotSupportedException.class})    public Result request405(HttpRequestMethodNotSupportedException ex) {        return resultFormat(ex);    }    /**     * 406错误     */    @ExceptionHandler({HttpMediaTypeNotAcceptableException.class})    public Result request406(HttpMediaTypeNotAcceptableException ex) {        return resultFormat(ex);    }    /**     * 500错误     */    @ExceptionHandler({ConversionNotSupportedException.class, HttpMessageNotWritableException.class})    public Result server500(RuntimeException ex) {        return resultFormat(ex);    }    /**     * 栈溢出     */    @ExceptionHandler({StackOverflowError.class})    public Result requestStackOverflow(StackOverflowError ex) {        return resultFormat(ex);    }    /**     * DAO层异常     */   /* @ExceptionHandler({DAOException.class})    public Result DAOExceptionHandler(DAOException ex) {        return resultFormat(ex);    }*/    /**     * 参数判断异常     */    /*@ExceptionHandler({ParamJudgeException.class})    public Result ParamJudgeExceptionHandler(ParamJudgeException ex) {        return resultFormat(ex);    }*/    /**     * 业务异常     */    @ExceptionHandler({BizException.class})    public Result BizExceptionHandler(BizException ex) {        return resultFormatBiz(ex);    }    /**     * 校验异常(对象属性)     */    @ExceptionHandler({BindException.class})    public Result ValidObjExceptionHandler(BindException ex) {        return validObjFormat(ex);    }    /**     * 校验异常(对象属性body)     */    @ExceptionHandler({MethodArgumentNotValidException.class})    public Result ValidObjExceptionHandler(MethodArgumentNotValidException ex) {        return validObjFormatX(ex);    }    /**     * 校验异常(单个参数)     */    @ExceptionHandler({ConstraintViolationException.class})    public Result ValidParamExceptionHandler(ConstraintViolationException ex) {        return validParamFormat(ex);    }    /**     * 其他错误     */    @ExceptionHandler({Exception.class})    public Result exception(Exception ex) {        return resultFormat(ex);    }    /**     * 将错误包装成json     */    private Result resultFormat(Throwable ex) {        // 记录错误信息        log.error(ExceptionUtils.getStackTrace(ex));        return Result.failed(ResultCode.SERVER_ERROR);    }    /**     * 将错误包装成json     */    private Result validObjFormat(BindException ex) {        // 记录错误信息        log.error(ExceptionUtils.getStackTrace(ex));        String msg = ex.getBindingResult().getAllErrors().iterator().next().getDefaultMessage();        return Result.failed(ResultCode.PARAM_ERROR, msg);    }    /**     * 将错误包装成json     */    private Result validObjFormatX(MethodArgumentNotValidException ex) {        // 记录错误信息        log.error(ExceptionUtils.getStackTrace(ex));        String msg = ex.getBindingResult().getAllErrors().iterator().next().getDefaultMessage();        return Result.failed(ResultCode.PARAM_ERROR, msg);    }    /**     * 将错误包装成json     */    private Result validParamFormat(ConstraintViolationException ex) {        // 记录错误信息        log.error(ExceptionUtils.getStackTrace(ex));        String msg = ex.getConstraintViolations().iterator().next().getMessage();        return Result.failed(ResultCode.PARAM_ERROR, msg);    }    /**     * 将错误包装成json     */    private Result resultFormatBiz(BizException ex) {        // 记录错误信息        if (ex.getCause() == null) {            log.error("(" + ex.getServerStateEnum().getCode() + ")" + ex.getServerStateEnum().getMsg());        } else {            log.error("(" + ex.getServerStateEnum().getCode() + ")" + ex.getServerStateEnum().getMsg() + ":--" + ExceptionUtils.getStackTrace(ex.getCause()));        }        return Result.failed(ex.getServerStateEnum());    }}